<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tags: linux | Gittu's Blog]]></title>
  <link href="http://blog.sarim.me/tags/linux/atom.xml" rel="self"/>
  <link href="http://blog.sarim.me/"/>
  <updated>2014-05-28T16:32:06+06:00</updated>
  <id>http://blog.sarim.me/</id>
  <author>
    <name><![CDATA[Sarim Khan]]></name>
    <email><![CDATA[sarim2005@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to make persistent ubuntu live virtualbox image]]></title>
    <link href="http://blog.sarim.me/2013/12/18/how-to-make-persistent-ubuntu-live-virtualbox-image/"/>
    <updated>2013-12-18T02:44:00+06:00</updated>
    <id>http://blog.sarim.me/2013/12/18/how-to-make-persistent-ubuntu-live-virtualbox-image</id>
    <content type="html"><![CDATA[<p>OK, i&#39;ve read the title, wtf is that ? So first i&#39;m going to explain what i&#39;m going to do, and why i&#39;m doing it. When we want to try ubuntu without installing, we have two option,</p>

<ol>
<li>Throw the iso into virtualbox and taste the new system.</li>
<li>Make a live usb disk and boot my computer from it.</li>
</ol>

<!--more-->

<p>Now i want to persist some changes, i installed some packages, created some files, i want to have them when i boot this live system again. Easy, just add some persistent space when creating the live usb. But if i want to do that in virtualbox ? What if i dont want to reboot my pc, i want do my other tasks and want to try out ubuntu in parallel ? Voila! install that ubuntu inside virtualbox. OK, but now i dont want to waste a few gigs of my disk space (not to mention the time to install ubuntu). I want to use persistance with that live system. There was no way till now :( </p>

<p>But fear not, Thats what i&#39;m going to do now :D I&#39;m gonna make a virtualbox image from ubuntu iso, adding a persistent space with it in the process.</p>

<h1>Requirement</h1>

<ol>
<li>Virtualbox.</li>
<li>Unetbootin.</li>
</ol>

<h1>Procedure</h1>

<p>I did this in mac, but pretty same process will be applicable for linux too (hopefully). Now head over to terminal and follow the steps.</p>

<ol>
<li><p>Lets create a folder and do all the bullshitting inside it.</p>
<div class="highlight"><pre><code class="text">$ mkdir ubuntulive
$ cd ubuntulive
</code></pre></div></li>
<li><p>Lets make a empty 1.0GB image to hold all that bullshit.</p>
<div class="highlight"><pre><code class="text">$ dd if=/dev/zero of=ubuntu.img bs=1m count=1024
$ ls -lsh
total 2097152
2097152 -rw-r--r--  1 sarim  staff   1.0G Dec 18 02:42 ubuntu.img
</code></pre></div></li>
<li><p>Bullshit container creation done, now register this bullshit as disk in the system.</p>
<div class="highlight"><pre><code class="text">$ open -a Disk\ Utility ubuntu.img
</code></pre></div></li>
<li><p>In Disk Utility, right click on the <code>ubuntu.img</code> in the left side pane. Select <code>Open Disk Image</code> from popup menu. It&#39;ll show a error msg.</p></li>
<li><p>Now check the disk listing, you&#39;ll see a new disk added at the end. It is <code>/dev/disk6</code> for me.</p>
<div class="highlight"><pre><code class="text">$ diskutil list

/dev/disk6
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:                                                   *1.1 GB     disk6
</code></pre></div>
<p>Yay ! our bullshit disk is registered in the system :D</p></li>
<li><p>Now lets partition the disk. We are going to create a <code>fat32</code> partition named <code>UBUNTULIVE</code>.</p>
<div class="highlight"><pre><code class="text">$ diskutil partitionDisk /dev/disk6 1 MBRFormat fat32 UBUNTULIVE 100%
Started partitioning on disk6
Unmounting disk
Creating the partition map
Waiting for the disks to reappear
Formatting disk6s1 as MS-DOS (FAT32) with name UBUNTULIVE
512 bytes per physical sector
/dev/rdisk6s1: 2093024 sectors in 261628 FAT32 clusters (4096 bytes/cluster)
bps=512 spc=8 res=32 nft=2 mid=0xf8 spt=32 hds=128 hid=2 drv=0x80 bsec=2097150 bspf=2044 rdcl=2 infs=1 bkbs=6
Mounting disk
Finished partitioning on disk6
/dev/disk6
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *1.1 GB     disk6
   1:                 DOS_FAT_32 UBUNTULIVE              1.1 GB     disk6s1
</code></pre></div></li>
<li><p>Now the <code>UBUNTULIVE</code> drive will be mounted in finder. Open <code>Unetbootin</code>. Select the iso, enter some how much space you want for persistance. Select <code>/dev/disk6s1</code> in <code>Drive</code>. Click OK and Let it finish making the live disk. It happens in a snap in my ssd powered system, your experience may vary.</p>

<p><img src="http://cl.ly/T0hy/Screen%20Shot%202013-12-18%20at%202.48.37%20AM.jpg" alt="Unetbootin"></p></li>
<li><p>After unetbootin is finished, Go to <code>UBUNTULIVE</code> drive. Inside the drive, open <code>syslinux.cfg</code> in a text editor. (I used Textmate). Add the following lines at the end.</p>
<div class="highlight"><pre><code class="text">label ubnentry6
menu label ^Try Ubuntu without installing in Gittu way
kernel /casper/vmlinuz
append initrd=/casper/initrd.lz live-media=/dev/sda1 live-media-path=/casper/ file=/cdrom/preseed/ubuntu.seed ignore_uuid boot=casper quiet splash -- persistent
</code></pre></div></li>
<li><p>Save the file and unmount/eject the <code>UBUNTULIVE</code> drive.</p></li>
<li><p>GUI time is over, back to terminal. Now our image is ready. Convert it for virtualbox.</p>
<div class="highlight"><pre><code class="text">$ VBoxManage convertfromraw -format VDI ubuntu.img ubuntu_vbox.vdi
Converting from raw image file=&quot;ubuntu.img&quot; to file=&quot;ubuntu_vbox.vdi&quot;...
Creating dynamic image with size 1073741824 bytes (1024MB)...
</code></pre></div></li>
<li><p>Phew! Done :D Now open virtualbox. Create a new vm/Edit Existing, in storage section, select <code>Choose Existing Disk</code> and select this <code>ubuntu_vbox.vdi</code> there. Boot the vm, in unetbootin menu, select the last option and press enter to boot.</p>

<p><img src="http://cl.ly/T0RH/Screen%20Shot%202013-12-18%20at%202.51.41%20AM.jpg" alt="image"></p></li>
</ol>

<h3>Notes</h3>

<ul>
<li>For linux, step 3 to 6 can be done using gparted. <code>$ gparted ./ubuntu.img</code> will do.</li>
<li>This guide is based on ubuntu 13.10. A new boot flag <code>live-media</code> is needed for 13.10. That was taken from <a href="http://schmidi2.wordpress.com/2013/11/19/error-reading-libudevhwdb-bin-no-such-file-or-directory/">schmidi2.wordpress.com</a>. If you are using another version, you may ommit the flag in step 8.</li>
<li>Ubuntu ISO and 100MB persistent space fits in 1GB (1024MB) image, but if you want to increase persistent space, you need to increase image size (the <code>count</code> param) in step 2 too. </li>
</ul>

<p>Now, this thing still wasted 2gigs of disk space, didn&#39;t it ? So whats the point ? There is none :v you may take it as bullshitting, or a scienctific experiment for educational purposes, your wish. Good luck and Happy linuxing (y)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use aria2 for downloading in zypper]]></title>
    <link href="http://blog.sarim.me/2013/03/19/how-to-use-aria2-for-downloading-in-zypper/"/>
    <updated>2013-03-19T21:40:00+06:00</updated>
    <id>http://blog.sarim.me/2013/03/19/how-to-use-aria2-for-downloading-in-zypper</id>
    <content type="html"><![CDATA[<p>Zypper, the great featureful package manager for opensuse uses curl for downloading as default. On the other side, aria2, is one of the best multi-threaded download manager available for *nix. Zypper has a aria2 plugin for a long time but usually not activated by default.</p>

<p>Let&#39;s make zypper download packages in the speed of light using aria2 :D</p>

<!--more-->

<ol>
<li><p>First install aria2. You can install it from repo, <code>sudo zypper in aria2</code> or from <a href="http://software.opensuse.org/package/aria2">software.opensuse.org</a></p></li>
<li><p>Now we need to tell zypper (libzypp to be technically correct) to use aria2, passing ENV Variable <code>ZYPP_ARIA2C</code> is needed for this. Open <code>/etc/bash.bashrc</code> for editing.
<code>sh
sudo nano -w /etc/bash.bashrc
</code></p></li>
<li><p>Keep pressing <code>Cntrl + v</code> for scrolling down. At the end of the file, add this line.
<code>sh
export ZYPP_ARIA2C=1
</code>
Save and Exit. (<code>Cntrl + X</code>, <code>Y</code>, <code>Enter</code>)</p></li>
<li><p>Now Zypper will use aria2 for downloading as root user, but when using sudo, that ENV variable will be striped. To fix this, edit <code>/etc/sudoers</code>
<code>sh
sudo nano -w /etc/sudoers
</code>
Look for this line
<code>sh
Defaults env_keep = &quot;LANG LC_ADDRESS LC_CTYPE LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE LC_TIME LC_ALL LANGUAGE LINGUAS XDG_SESSION_COOKIE&quot;
</code>
Add <code>ZYPP_ARIA2C</code> at the end of this line.
<code>sh
Defaults env_keep = &quot;LANG LC_ADDRESS LC_CTYPE LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE LC_TIME LC_ALL LANGUAGE LINGUAS XDG_SESSION_COOKIE ZYPP_ARIA2C&quot;
</code></p></li>
</ol>

<p>Save and Exit.</p>

<p>Done. Restart terminal and try to download a package using zypper. Zypper will now use aria2. I noticed a bug though, you wont be seeing the download progress, but i can live with it, dont u ? :)</p>

<p>This guide is written in openSUSE 12.3 KDE, but the process will be similiar for other versions of openSUSE.</p>

<p>Happy Linuxing :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Streaming a mumble session over Icecast]]></title>
    <link href="http://blog.sarim.me/2013/03/09/streaming-a-mumble-session-over-icecast/"/>
    <updated>2013-03-09T19:45:00+06:00</updated>
    <id>http://blog.sarim.me/2013/03/09/streaming-a-mumble-session-over-icecast</id>
    <content type="html"><![CDATA[<p>This guide is heavily based on <a href="http://www.skyehaven.net/blog/2011/03/14/mumble-icecast/">derek&#39;s guide</a> but i used liquidsoap instead of darkice and vnc for headless linux server.</p>

<p>Lets say you have some users talking in a mumble server and want to brodcast that conversation but dont want  people to join and interfare but want people able to listen to. So, here&#39;s how to do that.</p>

<!-- more -->

<h2>Requirements:</h2>

<ul>
<li>Mumble Client</li>
<li>PulseAudio</li>
<li><a href="http://savonet.sourceforge.net/">Savonet Liquidsoap</a></li>
<li>Icecast</li>
</ul>

<h2>Installation</h2>

<p>Here i&#39;m gonna do it in ubuntu.</p>
<div class="highlight"><pre><code class="sh">apt-get install mumble pulseaudio liquidsoap liquidsoap-plugin-lame
</code></pre></div>
<p>If you are doing this in a headless server you&#39;ll also need vncserver. Realvnc is my favorite but tightvnc will also do.
<code>sh
apt-get tightvncserver
</code></p>

<p>Now install icecast
<code>sh
apt-get install icecast2
</code></p>

<h2>Configuration</h2>

<h3>Icecast</h3>

<p>if you choose not to configure icecast2 during installation here&#39;s how to do that manually.</p>

<p>Open <code>/etc/icecast2/icecast.xml</code></p>
<div class="highlight"><pre><code class="sh">nano /etc/icecast2/icecast.xml
</code></pre></div>
<p>There is many configuration with comments, change them if you want, but at least we need to change the default passwords. change <code>&lt;source-password&gt;</code>, <code>&lt;relay-password&gt;</code> and <code>&lt;admin-password&gt;</code></p>

<p>Now enable icecast2, open <code>/etc/default/icecast2</code>
<code>sh
nano /etc/default/icecast2
</code>
change
<code>sh
ENABLE=true
</code></p>

<p>Now start icecast2
<code>sh
/etc/init.d/icecast2 start
</code></p>

<p>Point your browser to SERVER_IP:PORT to see icecast.</p>

<hr>

<h3>Vnc</h3>

<p>Skip this if you already have installed and access to Desktop Environment.</p>

<p>Now to run mumble, we need a DE. you may install lxde (as a lightweight DE)
<code>sh
apt-get install lxde
</code></p>

<p>Start a vnc session which will also start the <strong>X</strong> server.
<code>sh
vncserver
</code>
Set a password when asked.</p>

<p>Now go to your own computer&#39;s desktop and using any VNC client, connect to you server. Credentials will be like host: <code>serverip:1</code> and your vnc password.</p>

<hr>

<h3>Pulseaudio</h3>

<p>Assuming you were using ssh so far, now switch to DE, and start lxterminal to further complete tasks ahead.</p>

<p>Now we need to create a virtual device in pulseaudio from where we&#39;ll be capturing the mumble session and to where mumble should send its output.
To do that, run,
<code>sh
pactl load-module module-null-sink sink_name=stream
</code></p>

<hr>

<h3>Mumble</h3>

<p>Start mumble from menu or running <code>mumble</code> in terminal. Most important thing to set is </p>

<ul>
<li>Settings-&gt;Audio Output
<code>System = PulseAudio</code>
<code>Device = Null Output</code></li>
</ul>

<p>You can leave other configs as default.</p>

<p>Now connect to desired mumble server/channel.</p>

<hr>

<h3>Liquidsoap</h3>

<p>Now the final task, link mumble&#39;s output to icecast. It is a good idea to check out <a href="http://savonet.sourceforge.net/doc-svn/quick_start.html">quick start</a> guide which&#39;ll give you a clear idea about Liquidsoap.</p>

<p>We&#39;ll create a liq script.
<code>sh
nano sk.liq
</code></p>

<p>Now the main tricky part, you need to change the content of the script.</p>
<div class="highlight"><pre><code class="python"><span class="c">#!/usr/bin/liquidsoap</span>
<span class="n">output</span><span class="o">.</span><span class="n">icecast</span><span class="p">(</span><span class="o">%</span><span class="n">mp3</span><span class="p">,</span>     <span class="n">host</span> <span class="o">=</span> <span class="s">&quot;example_host&quot;</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">8000</span><span class="p">,</span>      <span class="n">password</span> <span class="o">=</span> <span class="s">&quot;source_password&quot;</span><span class="p">,</span> <span class="n">mount</span> <span class="o">=</span> <span class="s">&quot;gittu&quot;</span><span class="p">,</span>     <span class="nb">input</span><span class="o">.</span><span class="n">pulseaudio</span><span class="p">(</span><span class="n">device</span> <span class="o">=</span> <span class="s">&quot;stream.monitor&quot;</span><span class="p">))</span>
</code></pre></div>
<p>You need to change <code>example_host</code> to your icecast server&#39;s ip or address. <code>source_password</code> to the <code>&lt;source-password&gt;</code> set in icecast.</p>

<p>Now everything is set, fire things up :)</p>
<div class="highlight"><pre><code class="sh">chmod +x sk.liq
./sk.liq
</code></pre></div>
<p>Now go to icecast and listen your mumble conversation :)</p>

<hr>

<h3>Toubleshooting</h3>

<ol>
<li>If icecast fails to start, check that the port (default 8000) is not being used by another process. It took away 30 minutes of my life, nginx was blocking 8000 port.</li>
<li>Try running liquidsoap in verbose mode <code>liquidsoap -v sk.liq</code> if you are having trouble with it.</li>
</ol>

<p>Thats all :D Let me know your thoughts in comment section.</p>
]]></content>
  </entry>
  
</feed>
